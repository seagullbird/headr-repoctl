// Code generated by protoc-gen-go. DO NOT EDIT.
// source: repoctlsvc.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	repoctlsvc.proto

It has these top-level messages:
	NewSiteRequest
	NewSiteReply
	DeleteSiteRequest
	DeleteSiteReply
	NewPostRequest
	NewPostReply
	RemovePostRequest
	RemovePostReply
	ReadPostRequest
	ReadPostReply
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewSiteRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Sitename string `protobuf:"bytes,2,opt,name=sitename" json:"sitename,omitempty"`
}

func (m *NewSiteRequest) Reset()                    { *m = NewSiteRequest{} }
func (m *NewSiteRequest) String() string            { return proto.CompactTextString(m) }
func (*NewSiteRequest) ProtoMessage()               {}
func (*NewSiteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewSiteRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewSiteRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

type NewSiteReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *NewSiteReply) Reset()                    { *m = NewSiteReply{} }
func (m *NewSiteReply) String() string            { return proto.CompactTextString(m) }
func (*NewSiteReply) ProtoMessage()               {}
func (*NewSiteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewSiteReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DeleteSiteRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Sitename string `protobuf:"bytes,2,opt,name=sitename" json:"sitename,omitempty"`
}

func (m *DeleteSiteRequest) Reset()                    { *m = DeleteSiteRequest{} }
func (m *DeleteSiteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSiteRequest) ProtoMessage()               {}
func (*DeleteSiteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteSiteRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DeleteSiteRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

type DeleteSiteReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *DeleteSiteReply) Reset()                    { *m = DeleteSiteReply{} }
func (m *DeleteSiteReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteSiteReply) ProtoMessage()               {}
func (*DeleteSiteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteSiteReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type NewPostRequest struct {
	Author   string `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Sitename string `protobuf:"bytes,2,opt,name=sitename" json:"sitename,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content" json:"content,omitempty"`
}

func (m *NewPostRequest) Reset()                    { *m = NewPostRequest{} }
func (m *NewPostRequest) String() string            { return proto.CompactTextString(m) }
func (*NewPostRequest) ProtoMessage()               {}
func (*NewPostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewPostRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *NewPostRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

func (m *NewPostRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *NewPostRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NewPostReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *NewPostReply) Reset()                    { *m = NewPostReply{} }
func (m *NewPostReply) String() string            { return proto.CompactTextString(m) }
func (*NewPostReply) ProtoMessage()               {}
func (*NewPostReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NewPostReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type RemovePostRequest struct {
	Author   string `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Sitename string `protobuf:"bytes,2,opt,name=sitename" json:"sitename,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
}

func (m *RemovePostRequest) Reset()                    { *m = RemovePostRequest{} }
func (m *RemovePostRequest) String() string            { return proto.CompactTextString(m) }
func (*RemovePostRequest) ProtoMessage()               {}
func (*RemovePostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemovePostRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *RemovePostRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

func (m *RemovePostRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type RemovePostReply struct {
	Err string `protobuf:"bytes,1,opt,name=err" json:"err,omitempty"`
}

func (m *RemovePostReply) Reset()                    { *m = RemovePostReply{} }
func (m *RemovePostReply) String() string            { return proto.CompactTextString(m) }
func (*RemovePostReply) ProtoMessage()               {}
func (*RemovePostReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemovePostReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type ReadPostRequest struct {
	Author   string `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
	Sitename string `protobuf:"bytes,2,opt,name=sitename" json:"sitename,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
}

func (m *ReadPostRequest) Reset()                    { *m = ReadPostRequest{} }
func (m *ReadPostRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadPostRequest) ProtoMessage()               {}
func (*ReadPostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ReadPostRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ReadPostRequest) GetSitename() string {
	if m != nil {
		return m.Sitename
	}
	return ""
}

func (m *ReadPostRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type ReadPostReply struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *ReadPostReply) Reset()                    { *m = ReadPostReply{} }
func (m *ReadPostReply) String() string            { return proto.CompactTextString(m) }
func (*ReadPostReply) ProtoMessage()               {}
func (*ReadPostReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReadPostReply) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ReadPostReply) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*NewSiteRequest)(nil), "pb.NewSiteRequest")
	proto.RegisterType((*NewSiteReply)(nil), "pb.NewSiteReply")
	proto.RegisterType((*DeleteSiteRequest)(nil), "pb.DeleteSiteRequest")
	proto.RegisterType((*DeleteSiteReply)(nil), "pb.DeleteSiteReply")
	proto.RegisterType((*NewPostRequest)(nil), "pb.NewPostRequest")
	proto.RegisterType((*NewPostReply)(nil), "pb.NewPostReply")
	proto.RegisterType((*RemovePostRequest)(nil), "pb.RemovePostRequest")
	proto.RegisterType((*RemovePostReply)(nil), "pb.RemovePostReply")
	proto.RegisterType((*ReadPostRequest)(nil), "pb.ReadPostRequest")
	proto.RegisterType((*ReadPostReply)(nil), "pb.ReadPostReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Repoctl service

type RepoctlClient interface {
	NewSite(ctx context.Context, in *NewSiteRequest, opts ...grpc.CallOption) (*NewSiteReply, error)
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteReply, error)
	NewPost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostReply, error)
	RemovePost(ctx context.Context, in *RemovePostRequest, opts ...grpc.CallOption) (*RemovePostReply, error)
	ReadPost(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*ReadPostReply, error)
}

type repoctlClient struct {
	cc *grpc.ClientConn
}

func NewRepoctlClient(cc *grpc.ClientConn) RepoctlClient {
	return &repoctlClient{cc}
}

func (c *repoctlClient) NewSite(ctx context.Context, in *NewSiteRequest, opts ...grpc.CallOption) (*NewSiteReply, error) {
	out := new(NewSiteReply)
	err := grpc.Invoke(ctx, "/pb.Repoctl/NewSite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoctlClient) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteReply, error) {
	out := new(DeleteSiteReply)
	err := grpc.Invoke(ctx, "/pb.Repoctl/DeleteSite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoctlClient) NewPost(ctx context.Context, in *NewPostRequest, opts ...grpc.CallOption) (*NewPostReply, error) {
	out := new(NewPostReply)
	err := grpc.Invoke(ctx, "/pb.Repoctl/NewPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoctlClient) RemovePost(ctx context.Context, in *RemovePostRequest, opts ...grpc.CallOption) (*RemovePostReply, error) {
	out := new(RemovePostReply)
	err := grpc.Invoke(ctx, "/pb.Repoctl/RemovePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoctlClient) ReadPost(ctx context.Context, in *ReadPostRequest, opts ...grpc.CallOption) (*ReadPostReply, error) {
	out := new(ReadPostReply)
	err := grpc.Invoke(ctx, "/pb.Repoctl/ReadPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Repoctl service

type RepoctlServer interface {
	NewSite(context.Context, *NewSiteRequest) (*NewSiteReply, error)
	DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteReply, error)
	NewPost(context.Context, *NewPostRequest) (*NewPostReply, error)
	RemovePost(context.Context, *RemovePostRequest) (*RemovePostReply, error)
	ReadPost(context.Context, *ReadPostRequest) (*ReadPostReply, error)
}

func RegisterRepoctlServer(s *grpc.Server, srv RepoctlServer) {
	s.RegisterService(&_Repoctl_serviceDesc, srv)
}

func _Repoctl_NewSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoctlServer).NewSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Repoctl/NewSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoctlServer).NewSite(ctx, req.(*NewSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repoctl_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoctlServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Repoctl/DeleteSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoctlServer).DeleteSite(ctx, req.(*DeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repoctl_NewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoctlServer).NewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Repoctl/NewPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoctlServer).NewPost(ctx, req.(*NewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repoctl_RemovePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoctlServer).RemovePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Repoctl/RemovePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoctlServer).RemovePost(ctx, req.(*RemovePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Repoctl_ReadPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoctlServer).ReadPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Repoctl/ReadPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoctlServer).ReadPost(ctx, req.(*ReadPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Repoctl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Repoctl",
	HandlerType: (*RepoctlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSite",
			Handler:    _Repoctl_NewSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _Repoctl_DeleteSite_Handler,
		},
		{
			MethodName: "NewPost",
			Handler:    _Repoctl_NewPost_Handler,
		},
		{
			MethodName: "RemovePost",
			Handler:    _Repoctl_RemovePost_Handler,
		},
		{
			MethodName: "ReadPost",
			Handler:    _Repoctl_ReadPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repoctlsvc.proto",
}

func init() { proto.RegisterFile("repoctlsvc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x4d, 0x4f, 0xb3, 0x40,
	0x10, 0xc7, 0x5b, 0xfa, 0x3c, 0x6d, 0x9d, 0xf8, 0xd2, 0x8e, 0x2f, 0x21, 0x9c, 0x1a, 0xbc, 0x78,
	0x22, 0xf1, 0xe5, 0xa4, 0x37, 0xa3, 0x57, 0x63, 0xf0, 0x13, 0x00, 0x8e, 0x91, 0x64, 0x61, 0x57,
	0xd8, 0xd6, 0xd4, 0xef, 0xe2, 0x77, 0x35, 0xcb, 0xb2, 0x0b, 0xb4, 0xc4, 0x8b, 0xe9, 0x8d, 0xd9,
	0x99, 0xd9, 0xdf, 0x7f, 0xff, 0x33, 0xc0, 0xac, 0x20, 0xc1, 0x13, 0xc9, 0xca, 0x55, 0x12, 0x88,
	0x82, 0x4b, 0x8e, 0x8e, 0x88, 0xfd, 0x7b, 0x38, 0x7c, 0xa2, 0xcf, 0x97, 0x54, 0x52, 0x48, 0x1f,
	0x4b, 0x2a, 0x25, 0x9e, 0xc0, 0x7f, 0xca, 0xa2, 0x94, 0xb9, 0xc3, 0xc5, 0xf0, 0x62, 0x2f, 0xd4,
	0x01, 0x7a, 0x30, 0x2d, 0x53, 0x49, 0x79, 0x94, 0x91, 0xeb, 0x54, 0x09, 0x1b, 0xfb, 0x0b, 0xd8,
	0xb7, 0x77, 0x08, 0xb6, 0xc6, 0x19, 0x8c, 0xa8, 0x28, 0xea, 0x7e, 0xf5, 0xe9, 0x3f, 0xc2, 0xfc,
	0x81, 0x18, 0x49, 0xfa, 0x1b, 0xe8, 0x1c, 0x8e, 0xda, 0xd7, 0xf4, 0xb3, 0xbe, 0xaa, 0x17, 0x3d,
	0xf3, 0x52, 0x1a, 0xd0, 0x19, 0x8c, 0xa3, 0xa5, 0x7c, 0xe7, 0xa6, 0xac, 0x8e, 0x7e, 0x43, 0xa9,
	0xdc, 0x5b, 0xca, 0x74, 0x6e, 0xa4, 0x73, 0x26, 0x46, 0x17, 0x26, 0x09, 0xcf, 0x25, 0xe5, 0xd2,
	0xfd, 0x57, 0xa5, 0x4c, 0x58, 0x3b, 0xa1, 0xd9, 0xfd, 0xea, 0x12, 0x98, 0x87, 0x94, 0xf1, 0x15,
	0xed, 0x50, 0xa0, 0xf2, 0xa9, 0x0d, 0xe9, 0x57, 0x12, 0xa9, 0xa2, 0xe8, 0x75, 0x97, 0x3a, 0xee,
	0xe0, 0xa0, 0x41, 0x28, 0x15, 0x2d, 0xe7, 0x86, 0x1d, 0xe7, 0x8c, 0x3e, 0xc7, 0xea, 0xbb, 0xfa,
	0x76, 0x60, 0x12, 0xea, 0x95, 0xc5, 0x4b, 0x98, 0xd4, 0x1b, 0x86, 0x18, 0x88, 0x38, 0xe8, 0xae,
	0xac, 0x37, 0xeb, 0x9c, 0x09, 0xb6, 0xf6, 0x07, 0x78, 0x0b, 0xd0, 0xec, 0x0a, 0x9e, 0xaa, 0x8a,
	0xad, 0x15, 0xf4, 0x8e, 0x37, 0x8f, 0x75, 0xaf, 0xc6, 0x29, 0xd9, 0x16, 0xd7, 0xb2, 0xc9, 0xe2,
	0xec, 0xbb, 0x34, 0xae, 0xb1, 0x5c, 0xe3, 0xb6, 0xe6, 0xac, 0x71, 0x1b, 0x93, 0xf1, 0x07, 0x78,
	0x03, 0x53, 0x63, 0x13, 0xd6, 0x25, 0x9d, 0xb9, 0x78, 0xf3, 0xee, 0x61, 0xd5, 0x15, 0x8f, 0xab,
	0x9f, 0xf8, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x26, 0x26, 0x6a, 0x2f, 0xd8, 0x03, 0x00, 0x00,
}
